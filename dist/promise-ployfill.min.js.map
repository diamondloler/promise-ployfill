{"version":3,"sources":["promise.js"],"names":["root","factory","define","amd","exports","_typeof","module","Promise","global","window","undefined","isFunction","v","asyncFn","process","nextTick","setImmediate","setTimeout","_promise","callback","result","this","speciality","modelCount","then","onResolve","onReject","item","deferreds","push","isThenAble","createMutation","type","cb","vm","value","Error","call","getDeferred","arr","length","shift","resolve","obj","deferred","staticMode","reject","prototype","results","all","queues","Array","isArray","TypeError","proto","done","pushResultsStack","distribute","res","err","race","currItem","loop","isRuned"],"mappings":"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","file":"promise-ployfill.min.js","sourcesContent":["(function (root, factory) {\r\n    if (typeof define === 'function' && define.amd) {\r\n        define(function () {\r\n            return factory(root);\r\n        });\r\n    } else if (typeof exports === \"object\" && typeof module !== \"undefined\") {\r\n        module.exports = factory(root);\r\n    } else {\r\n        !root.Promise && (root.Promise = factory(root));\r\n    }\r\n})(typeof global !== 'undefined' ? global : typeof window !== 'undefined' ? window : this, function (window) {\r\n    var isFunction = function (v) {\r\n        return typeof v === 'function'\r\n    }\r\n    var getAsyncFunc = function () {\r\n        return typeof process === 'object' &&\r\n            process !== null &&\r\n            typeof process.nextTick === 'function' &&\r\n            process.nextTick ||\r\n            typeof setImmediate === 'function' &&\r\n            setImmediate ||\r\n            setTimeout;\r\n    }\r\n    var asyncFn = getAsyncFunc()\r\n\r\n    \r\n    var _promise = function (callback) {\r\n        //记录生成实例的数目\r\n        this.speciality.modelCount++;\r\n\r\n        //mark the result of onResolve or onReject\r\n        var result\r\n\r\n        this.then = function (onResolve, onReject) {\r\n            if (isFunction(onResolve) || isFunction(onReject)) {\r\n                var item = {\r\n                    onResolve: onResolve || null,\r\n                    onReject: onReject || null\r\n                }\r\n                this.deferreds.push(item)\r\n                this.speciality.isThenAble = true\r\n            }\r\n            return new _promise()\r\n        }\r\n\r\n\r\n        //create async mutation function\r\n        var createMutation = function (type, cb, vm) {\r\n            return function (value) {\r\n                if (value instanceof _promise) {\r\n                    throw new Error('the value of ' + type + ' should not construtor itself')\r\n                }\r\n                if (!value) return\r\n                asyncFn(function () {\r\n                    if (vm.speciality.isThenAble) {\r\n                        isFunction(cb) && cb.call(vm, value)\r\n                    }\r\n                })\r\n            }\r\n        }\r\n\r\n        var getDeferred = function (arr) {\r\n            return arr.length == 0 ? {} : arr.shift()\r\n        }\r\n\r\n        var isInstance = function (obj) {\r\n            return obj && obj instanceof _promise || false\r\n        }\r\n\r\n        var resolve = createMutation('resolve', function (value) {\r\n            //async run\r\n            var deferred = getDeferred(this.deferreds)\r\n\r\n            result = deferred.onResolve && deferred.onResolve(value)\r\n            //决定下一个mutation执行             \r\n            this.speciality.isThenAble = isInstance(result) || this.speciality.staticMode\r\n        }, this)\r\n\r\n        var reject = createMutation('reject', function (value) {\r\n            //async run\r\n            var deferred = getDeferred(this.deferreds)\r\n            deferred.onReject && deferred.onReject(value)\r\n            //终止后续promise执行   \r\n            this.speciality.isThenAble = false\r\n        }, this)\r\n\r\n        callback && callback.call(null, resolve, reject)\r\n    }\r\n\r\n    //延迟对象\r\n    _promise.prototype.deferreds = []\r\n\r\n    //promise特性对象\r\n    _promise.prototype.speciality = {\r\n        isThenAble: false,\r\n        modelCount: 0,\r\n        results: [],\r\n        staticMode: false\r\n    }\r\n\r\n\r\n    _promise.all = function (queues) {\r\n        if (!queues || !Array.isArray(queues) || queues.length == 0) {\r\n            throw new TypeError('The 1st arguments must be array that has more than one element')\r\n        }\r\n\r\n        var proto = this.prototype,\r\n            deferreds = proto.deferreds,\r\n            speciality = proto.speciality,\r\n            results = speciality.results,\r\n            done = null\r\n\r\n        speciality.staticMode = true\r\n\r\n        var pushResultsStack = function (v) {\r\n            v && results.push(v)\r\n        }\r\n\r\n        return new _promise(function (resolve) {\r\n            var distribute = function () {\r\n                var value = queues.shift()\r\n                if (value === void 0) {\r\n                    if (done) {\r\n                        deferreds.push(done)\r\n                        resolve(results)\r\n                    }\r\n                    return\r\n                }\r\n                if (value instanceof _promise) {\r\n                    value.then((res) => {\r\n                        pushResultsStack(res)\r\n                        distribute()\r\n                    }, (err) => {\r\n                        //假如发生错误，立即停止递归，记录错误并触发最外层的then回调\r\n                        pushResultsStack(err)\r\n                        proto.deferreds = [done]\r\n                        done = null\r\n                        resolve(results)\r\n                        return\r\n                    })\r\n                } else if (typeof value !== 'function') {\r\n                    pushResultsStack(value)\r\n                    distribute()\r\n                } else {\r\n                    throw new TypeError('The array member should not a function')\r\n                }\r\n            }\r\n            //确保promise.all.then最先执行\r\n            asyncFn(() => {\r\n                //mark the finally done Object\r\n                //移出promise.all.then里的回调，记录在done中\r\n                done = deferreds.shift()\r\n\r\n                //递归执行distribute，不同的值，不同逻辑处理，直到延迟队列为空或rejected停止\r\n                distribute()\r\n            })\r\n        })\r\n    }\r\n\r\n    _promise.race = function (queues) {\r\n        if (!queues || !Array.isArray(queues) || queues.length == 0) {\r\n            throw new TypeError('The 1st arguments must be array that has more than one element')\r\n        }\r\n\r\n        var loop = 0,\r\n            isRuned = false,\r\n            currItem;\r\n        var proto = this.prototype\r\n        var deferreds = proto.deferreds\r\n        var speciality = proto.speciality\r\n\r\n        speciality.staticMode = true\r\n\r\n        return new _promise((resolve, reject) => {\r\n            asyncFn(() => {\r\n                var done = deferreds.shift()\r\n                while (currItem = queues[loop++]) {\r\n                    if (!(currItem instanceof _promise)) {\r\n                        throw new TypeError(\r\n                            'The 1st argument ’s content  must be instance of _promise')\r\n                    }\r\n                    currItem.then((res) => {\r\n                        if (isRuned) return\r\n                        proto.deferreds = [done]\r\n                        resolve(res)\r\n                        isRuned = true\r\n                    }, (err) => {\r\n                        if (isRuned) return\r\n                        proto.deferreds = [done]\r\n                        reject(err)\r\n                        isRuned = true\r\n                    })\r\n                }\r\n            })\r\n        })\r\n    }\r\n\r\n    return _promise\r\n})"]}