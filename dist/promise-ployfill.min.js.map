{"version":3,"sources":["runtime.js","promise.js"],"names":["global","undefined","Op","Object","prototype","hasOwn","hasOwnProperty","$Symbol","Symbol","iteratorSymbol","iterator","asyncIteratorSymbol","asyncIterator","toStringTagSymbol","toStringTag","inModule","module","_typeof","runtime","regeneratorRuntime","exports","wrap","GenStateSuspendedStart","GenStateSuspendedYield","GenStateExecuting","GenStateCompleted","ContinueSentinel","IteratorPrototype","this","getProto","getPrototypeOf","NativeIteratorPrototype","values","call","Gp","GeneratorFunctionPrototype","Generator","create","GeneratorFunction","constructor","displayName","isGeneratorFunction","genFun","ctor","name","mark","setPrototypeOf","__proto__","awrap","arg","__await","defineIteratorMethods","AsyncIterator","async","innerFn","outerFn","self","tryLocsList","iter","next","then","result","done","value","toString","keys","object","key","push","reverse","length","pop","Context","reset","skipTempReset","prev","sent","_sent","delegate","method","tryEntries","forEach","resetTryEntry","charAt","isNaN","slice","stop","rootRecord","completion","type","rval","dispatchException","exception","context","handle","loc","caught","record","i","entry","tryLoc","hasCatch","hasFinally","catchLoc","finallyLoc","Error","abrupt","finallyEntry","complete","afterLoc","finish","catch","thrown","delegateYield","iterable","resultName","nextLoc","state","protoGenerator","generator","_invoke","doneResult","delegateResult","maybeInvokeDelegate","tryCatch","fn","obj","err","previousPromise","callInvokeWithMethodAndArg","Promise","resolve","reject","invoke","unwrapped","error","return","TypeError","info","pushTryEntry","locs","iteratorMethod","Function","root","factory","define","amd","window","isFunction","v","asyncTask","process","nextTick","setImmediate","setTimeout","isInstance","PromisePolyfill","resolver","fulfilled","rejected","isThenAble","deferreds","onResolve","onReject","deferred","createMutationHandler","cb","popDeferredsStack","arr","shift","onInnerPromiseFulfilled","res","onInnerPromiseRejected","all","queue","Array","isArray","item","_resolve","results","consume","onResolved","mutationProxy","onRejected","ins","isReject","index","findIndex","untilDone","apply","bind","ocurrError","resovle","arguments","console","warn","race","onMutated","data"],"mappings":"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","file":"promise-ployfill.min.js","sourcesContent":["/**\r\n * Copyright (c) 2014-present, Facebook, Inc.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n */\r\n\r\n!(function(global) {\r\n  \"use strict\";\r\n\r\n  var Op = Object.prototype;\r\n  var hasOwn = Op.hasOwnProperty;\r\n  var undefined; // More compressible than void 0.\r\n  var $Symbol = typeof Symbol === \"function\" ? Symbol : {};\r\n  var iteratorSymbol = $Symbol.iterator || \"@@iterator\";\r\n  var asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\";\r\n  var toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\";\r\n\r\n  var inModule = typeof module === \"object\";\r\n  var runtime = global.regeneratorRuntime;\r\n  if (runtime) {\r\n    if (inModule) {\r\n      // If regeneratorRuntime is defined globally and we're in a module,\r\n      // make the exports object identical to regeneratorRuntime.\r\n      module.exports = runtime;\r\n    }\r\n    // Don't bother evaluating the rest of this file if the runtime was\r\n    // already defined globally.\r\n    return;\r\n  }\r\n\r\n  // Define the runtime globally (as expected by generated code) as either\r\n  // module.exports (if we're in a module) or a new, empty object.\r\n  runtime = global.regeneratorRuntime = inModule ? module.exports : {};\r\n\r\n  function wrap(innerFn, outerFn, self, tryLocsList) {\r\n    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.\r\n    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;\r\n    var generator = Object.create(protoGenerator.prototype);\r\n    var context = new Context(tryLocsList || []);\r\n\r\n    // The ._invoke method unifies the implementations of the .next,\r\n    // .throw, and .return methods.\r\n    generator._invoke = makeInvokeMethod(innerFn, self, context);\r\n\r\n    return generator;\r\n  }\r\n  runtime.wrap = wrap;\r\n\r\n  // Try/catch helper to minimize deoptimizations. Returns a completion\r\n  // record like context.tryEntries[i].completion. This interface could\r\n  // have been (and was previously) designed to take a closure to be\r\n  // invoked without arguments, but in all the cases we care about we\r\n  // already have an existing method we want to call, so there's no need\r\n  // to create a new function object. We can even get away with assuming\r\n  // the method takes exactly one argument, since that happens to be true\r\n  // in every case, so we don't have to touch the arguments object. The\r\n  // only additional allocation required is the completion record, which\r\n  // has a stable shape and so hopefully should be cheap to allocate.\r\n  function tryCatch(fn, obj, arg) {\r\n    try {\r\n      return { type: \"normal\", arg: fn.call(obj, arg) };\r\n    } catch (err) {\r\n      return { type: \"throw\", arg: err };\r\n    }\r\n  }\r\n\r\n  var GenStateSuspendedStart = \"suspendedStart\";\r\n  var GenStateSuspendedYield = \"suspendedYield\";\r\n  var GenStateExecuting = \"executing\";\r\n  var GenStateCompleted = \"completed\";\r\n\r\n  // Returning this object from the innerFn has the same effect as\r\n  // breaking out of the dispatch switch statement.\r\n  var ContinueSentinel = {};\r\n\r\n  // Dummy constructor functions that we use as the .constructor and\r\n  // .constructor.prototype properties for functions that return Generator\r\n  // objects. For full spec compliance, you may wish to configure your\r\n  // minifier not to mangle the names of these two functions.\r\n  function Generator() {}\r\n  function GeneratorFunction() {}\r\n  function GeneratorFunctionPrototype() {}\r\n\r\n  // This is a polyfill for %IteratorPrototype% for environments that\r\n  // don't natively support it.\r\n  var IteratorPrototype = {};\r\n  IteratorPrototype[iteratorSymbol] = function () {\r\n    return this;\r\n  };\r\n\r\n  var getProto = Object.getPrototypeOf;\r\n  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));\r\n  if (NativeIteratorPrototype &&\r\n      NativeIteratorPrototype !== Op &&\r\n      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {\r\n    // This environment has a native %IteratorPrototype%; use it instead\r\n    // of the polyfill.\r\n    IteratorPrototype = NativeIteratorPrototype;\r\n  }\r\n\r\n  var Gp = GeneratorFunctionPrototype.prototype =\r\n    Generator.prototype = Object.create(IteratorPrototype);\r\n  GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;\r\n  GeneratorFunctionPrototype.constructor = GeneratorFunction;\r\n  GeneratorFunctionPrototype[toStringTagSymbol] =\r\n    GeneratorFunction.displayName = \"GeneratorFunction\";\r\n\r\n  // Helper for defining the .next, .throw, and .return methods of the\r\n  // Iterator interface in terms of a single ._invoke method.\r\n  function defineIteratorMethods(prototype) {\r\n    [\"next\", \"throw\", \"return\"].forEach(function(method) {\r\n      prototype[method] = function(arg) {\r\n        return this._invoke(method, arg);\r\n      };\r\n    });\r\n  }\r\n\r\n  runtime.isGeneratorFunction = function(genFun) {\r\n    var ctor = typeof genFun === \"function\" && genFun.constructor;\r\n    return ctor\r\n      ? ctor === GeneratorFunction ||\r\n        // For the native GeneratorFunction constructor, the best we can\r\n        // do is to check its .name property.\r\n        (ctor.displayName || ctor.name) === \"GeneratorFunction\"\r\n      : false;\r\n  };\r\n\r\n  runtime.mark = function(genFun) {\r\n    if (Object.setPrototypeOf) {\r\n      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);\r\n    } else {\r\n      genFun.__proto__ = GeneratorFunctionPrototype;\r\n      if (!(toStringTagSymbol in genFun)) {\r\n        genFun[toStringTagSymbol] = \"GeneratorFunction\";\r\n      }\r\n    }\r\n    genFun.prototype = Object.create(Gp);\r\n    return genFun;\r\n  };\r\n\r\n  // Within the body of any async function, `await x` is transformed to\r\n  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test\r\n  // `hasOwn.call(value, \"__await\")` to determine if the yielded value is\r\n  // meant to be awaited.\r\n  runtime.awrap = function(arg) {\r\n    return { __await: arg };\r\n  };\r\n\r\n  function AsyncIterator(generator) {\r\n    function invoke(method, arg, resolve, reject) {\r\n      var record = tryCatch(generator[method], generator, arg);\r\n      if (record.type === \"throw\") {\r\n        reject(record.arg);\r\n      } else {\r\n        var result = record.arg;\r\n        var value = result.value;\r\n        if (value &&\r\n            typeof value === \"object\" &&\r\n            hasOwn.call(value, \"__await\")) {\r\n          return Promise.resolve(value.__await).then(function(value) {\r\n            invoke(\"next\", value, resolve, reject);\r\n          }, function(err) {\r\n            invoke(\"throw\", err, resolve, reject);\r\n          });\r\n        }\r\n\r\n        return Promise.resolve(value).then(function(unwrapped) {\r\n          // When a yielded Promise is resolved, its final value becomes\r\n          // the .value of the Promise<{value,done}> result for the\r\n          // current iteration.\r\n          result.value = unwrapped;\r\n          resolve(result);\r\n        }, function(error) {\r\n          // If a rejected Promise was yielded, throw the rejection back\r\n          // into the async generator function so it can be handled there.\r\n          return invoke(\"throw\", error, resolve, reject);\r\n        });\r\n      }\r\n    }\r\n\r\n    var previousPromise;\r\n\r\n    function enqueue(method, arg) {\r\n      function callInvokeWithMethodAndArg() {\r\n        return new Promise(function(resolve, reject) {\r\n          invoke(method, arg, resolve, reject);\r\n        });\r\n      }\r\n\r\n      return previousPromise =\r\n        // If enqueue has been called before, then we want to wait until\r\n        // all previous Promises have been resolved before calling invoke,\r\n        // so that results are always delivered in the correct order. If\r\n        // enqueue has not been called before, then it is important to\r\n        // call invoke immediately, without waiting on a callback to fire,\r\n        // so that the async generator function has the opportunity to do\r\n        // any necessary setup in a predictable way. This predictability\r\n        // is why the Promise constructor synchronously invokes its\r\n        // executor callback, and why async functions synchronously\r\n        // execute code before the first await. Since we implement simple\r\n        // async functions in terms of async generators, it is especially\r\n        // important to get this right, even though it requires care.\r\n        previousPromise ? previousPromise.then(\r\n          callInvokeWithMethodAndArg,\r\n          // Avoid propagating failures to Promises returned by later\r\n          // invocations of the iterator.\r\n          callInvokeWithMethodAndArg\r\n        ) : callInvokeWithMethodAndArg();\r\n    }\r\n\r\n    // Define the unified helper method that is used to implement .next,\r\n    // .throw, and .return (see defineIteratorMethods).\r\n    this._invoke = enqueue;\r\n  }\r\n\r\n  defineIteratorMethods(AsyncIterator.prototype);\r\n  AsyncIterator.prototype[asyncIteratorSymbol] = function () {\r\n    return this;\r\n  };\r\n  runtime.AsyncIterator = AsyncIterator;\r\n\r\n  // Note that simple async functions are implemented on top of\r\n  // AsyncIterator objects; they just return a Promise for the value of\r\n  // the final result produced by the iterator.\r\n  runtime.async = function(innerFn, outerFn, self, tryLocsList) {\r\n    var iter = new AsyncIterator(\r\n      wrap(innerFn, outerFn, self, tryLocsList)\r\n    );\r\n\r\n    return runtime.isGeneratorFunction(outerFn)\r\n      ? iter // If outerFn is a generator, return the full iterator.\r\n      : iter.next().then(function(result) {\r\n          return result.done ? result.value : iter.next();\r\n        });\r\n  };\r\n\r\n  function makeInvokeMethod(innerFn, self, context) {\r\n    var state = GenStateSuspendedStart;\r\n\r\n    return function invoke(method, arg) {\r\n      if (state === GenStateExecuting) {\r\n        throw new Error(\"Generator is already running\");\r\n      }\r\n\r\n      if (state === GenStateCompleted) {\r\n        if (method === \"throw\") {\r\n          throw arg;\r\n        }\r\n\r\n        // Be forgiving, per 25.3.3.3.3 of the spec:\r\n        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume\r\n        return doneResult();\r\n      }\r\n\r\n      context.method = method;\r\n      context.arg = arg;\r\n\r\n      while (true) {\r\n        var delegate = context.delegate;\r\n        if (delegate) {\r\n          var delegateResult = maybeInvokeDelegate(delegate, context);\r\n          if (delegateResult) {\r\n            if (delegateResult === ContinueSentinel) continue;\r\n            return delegateResult;\r\n          }\r\n        }\r\n\r\n        if (context.method === \"next\") {\r\n          // Setting context._sent for legacy support of Babel's\r\n          // function.sent implementation.\r\n          context.sent = context._sent = context.arg;\r\n\r\n        } else if (context.method === \"throw\") {\r\n          if (state === GenStateSuspendedStart) {\r\n            state = GenStateCompleted;\r\n            throw context.arg;\r\n          }\r\n\r\n          context.dispatchException(context.arg);\r\n\r\n        } else if (context.method === \"return\") {\r\n          context.abrupt(\"return\", context.arg);\r\n        }\r\n\r\n        state = GenStateExecuting;\r\n\r\n        var record = tryCatch(innerFn, self, context);\r\n        if (record.type === \"normal\") {\r\n          // If an exception is thrown from innerFn, we leave state ===\r\n          // GenStateExecuting and loop back for another invocation.\r\n          state = context.done\r\n            ? GenStateCompleted\r\n            : GenStateSuspendedYield;\r\n\r\n          if (record.arg === ContinueSentinel) {\r\n            continue;\r\n          }\r\n\r\n          return {\r\n            value: record.arg,\r\n            done: context.done\r\n          };\r\n\r\n        } else if (record.type === \"throw\") {\r\n          state = GenStateCompleted;\r\n          // Dispatch the exception by looping back around to the\r\n          // context.dispatchException(context.arg) call above.\r\n          context.method = \"throw\";\r\n          context.arg = record.arg;\r\n        }\r\n      }\r\n    };\r\n  }\r\n\r\n  // Call delegate.iterator[context.method](context.arg) and handle the\r\n  // result, either by returning a { value, done } result from the\r\n  // delegate iterator, or by modifying context.method and context.arg,\r\n  // setting context.delegate to null, and returning the ContinueSentinel.\r\n  function maybeInvokeDelegate(delegate, context) {\r\n    var method = delegate.iterator[context.method];\r\n    if (method === undefined) {\r\n      // A .throw or .return when the delegate iterator has no .throw\r\n      // method always terminates the yield* loop.\r\n      context.delegate = null;\r\n\r\n      if (context.method === \"throw\") {\r\n        if (delegate.iterator.return) {\r\n          // If the delegate iterator has a return method, give it a\r\n          // chance to clean up.\r\n          context.method = \"return\";\r\n          context.arg = undefined;\r\n          maybeInvokeDelegate(delegate, context);\r\n\r\n          if (context.method === \"throw\") {\r\n            // If maybeInvokeDelegate(context) changed context.method from\r\n            // \"return\" to \"throw\", let that override the TypeError below.\r\n            return ContinueSentinel;\r\n          }\r\n        }\r\n\r\n        context.method = \"throw\";\r\n        context.arg = new TypeError(\r\n          \"The iterator does not provide a 'throw' method\");\r\n      }\r\n\r\n      return ContinueSentinel;\r\n    }\r\n\r\n    var record = tryCatch(method, delegate.iterator, context.arg);\r\n\r\n    if (record.type === \"throw\") {\r\n      context.method = \"throw\";\r\n      context.arg = record.arg;\r\n      context.delegate = null;\r\n      return ContinueSentinel;\r\n    }\r\n\r\n    var info = record.arg;\r\n\r\n    if (! info) {\r\n      context.method = \"throw\";\r\n      context.arg = new TypeError(\"iterator result is not an object\");\r\n      context.delegate = null;\r\n      return ContinueSentinel;\r\n    }\r\n\r\n    if (info.done) {\r\n      // Assign the result of the finished delegate to the temporary\r\n      // variable specified by delegate.resultName (see delegateYield).\r\n      context[delegate.resultName] = info.value;\r\n\r\n      // Resume execution at the desired location (see delegateYield).\r\n      context.next = delegate.nextLoc;\r\n\r\n      // If context.method was \"throw\" but the delegate handled the\r\n      // exception, let the outer generator proceed normally. If\r\n      // context.method was \"next\", forget context.arg since it has been\r\n      // \"consumed\" by the delegate iterator. If context.method was\r\n      // \"return\", allow the original .return call to continue in the\r\n      // outer generator.\r\n      if (context.method !== \"return\") {\r\n        context.method = \"next\";\r\n        context.arg = undefined;\r\n      }\r\n\r\n    } else {\r\n      // Re-yield the result returned by the delegate method.\r\n      return info;\r\n    }\r\n\r\n    // The delegate iterator is finished, so forget it and continue with\r\n    // the outer generator.\r\n    context.delegate = null;\r\n    return ContinueSentinel;\r\n  }\r\n\r\n  // Define Generator.prototype.{next,throw,return} in terms of the\r\n  // unified ._invoke helper method.\r\n  defineIteratorMethods(Gp);\r\n\r\n  Gp[toStringTagSymbol] = \"Generator\";\r\n\r\n  // A Generator should always return itself as the iterator object when the\r\n  // @@iterator function is called on it. Some browsers' implementations of the\r\n  // iterator prototype chain incorrectly implement this, causing the Generator\r\n  // object to not be returned from this call. This ensures that doesn't happen.\r\n  // See https://github.com/facebook/regenerator/issues/274 for more details.\r\n  Gp[iteratorSymbol] = function() {\r\n    return this;\r\n  };\r\n\r\n  Gp.toString = function() {\r\n    return \"[object Generator]\";\r\n  };\r\n\r\n  function pushTryEntry(locs) {\r\n    var entry = { tryLoc: locs[0] };\r\n\r\n    if (1 in locs) {\r\n      entry.catchLoc = locs[1];\r\n    }\r\n\r\n    if (2 in locs) {\r\n      entry.finallyLoc = locs[2];\r\n      entry.afterLoc = locs[3];\r\n    }\r\n\r\n    this.tryEntries.push(entry);\r\n  }\r\n\r\n  function resetTryEntry(entry) {\r\n    var record = entry.completion || {};\r\n    record.type = \"normal\";\r\n    delete record.arg;\r\n    entry.completion = record;\r\n  }\r\n\r\n  function Context(tryLocsList) {\r\n    // The root entry object (effectively a try statement without a catch\r\n    // or a finally block) gives us a place to store values thrown from\r\n    // locations where there is no enclosing try statement.\r\n    this.tryEntries = [{ tryLoc: \"root\" }];\r\n    tryLocsList.forEach(pushTryEntry, this);\r\n    this.reset(true);\r\n  }\r\n\r\n  runtime.keys = function(object) {\r\n    var keys = [];\r\n    for (var key in object) {\r\n      keys.push(key);\r\n    }\r\n    keys.reverse();\r\n\r\n    // Rather than returning an object with a next method, we keep\r\n    // things simple and return the next function itself.\r\n    return function next() {\r\n      while (keys.length) {\r\n        var key = keys.pop();\r\n        if (key in object) {\r\n          next.value = key;\r\n          next.done = false;\r\n          return next;\r\n        }\r\n      }\r\n\r\n      // To avoid creating an additional object, we just hang the .value\r\n      // and .done properties off the next function object itself. This\r\n      // also ensures that the minifier will not anonymize the function.\r\n      next.done = true;\r\n      return next;\r\n    };\r\n  };\r\n\r\n  function values(iterable) {\r\n    if (iterable) {\r\n      var iteratorMethod = iterable[iteratorSymbol];\r\n      if (iteratorMethod) {\r\n        return iteratorMethod.call(iterable);\r\n      }\r\n\r\n      if (typeof iterable.next === \"function\") {\r\n        return iterable;\r\n      }\r\n\r\n      if (!isNaN(iterable.length)) {\r\n        var i = -1, next = function next() {\r\n          while (++i < iterable.length) {\r\n            if (hasOwn.call(iterable, i)) {\r\n              next.value = iterable[i];\r\n              next.done = false;\r\n              return next;\r\n            }\r\n          }\r\n\r\n          next.value = undefined;\r\n          next.done = true;\r\n\r\n          return next;\r\n        };\r\n\r\n        return next.next = next;\r\n      }\r\n    }\r\n\r\n    // Return an iterator with no values.\r\n    return { next: doneResult };\r\n  }\r\n  runtime.values = values;\r\n\r\n  function doneResult() {\r\n    return { value: undefined, done: true };\r\n  }\r\n\r\n  Context.prototype = {\r\n    constructor: Context,\r\n\r\n    reset: function(skipTempReset) {\r\n      this.prev = 0;\r\n      this.next = 0;\r\n      // Resetting context._sent for legacy support of Babel's\r\n      // function.sent implementation.\r\n      this.sent = this._sent = undefined;\r\n      this.done = false;\r\n      this.delegate = null;\r\n\r\n      this.method = \"next\";\r\n      this.arg = undefined;\r\n\r\n      this.tryEntries.forEach(resetTryEntry);\r\n\r\n      if (!skipTempReset) {\r\n        for (var name in this) {\r\n          // Not sure about the optimal order of these conditions:\r\n          if (name.charAt(0) === \"t\" &&\r\n              hasOwn.call(this, name) &&\r\n              !isNaN(+name.slice(1))) {\r\n            this[name] = undefined;\r\n          }\r\n        }\r\n      }\r\n    },\r\n\r\n    stop: function() {\r\n      this.done = true;\r\n\r\n      var rootEntry = this.tryEntries[0];\r\n      var rootRecord = rootEntry.completion;\r\n      if (rootRecord.type === \"throw\") {\r\n        throw rootRecord.arg;\r\n      }\r\n\r\n      return this.rval;\r\n    },\r\n\r\n    dispatchException: function(exception) {\r\n      if (this.done) {\r\n        throw exception;\r\n      }\r\n\r\n      var context = this;\r\n      function handle(loc, caught) {\r\n        record.type = \"throw\";\r\n        record.arg = exception;\r\n        context.next = loc;\r\n\r\n        if (caught) {\r\n          // If the dispatched exception was caught by a catch block,\r\n          // then let that catch block handle the exception normally.\r\n          context.method = \"next\";\r\n          context.arg = undefined;\r\n        }\r\n\r\n        return !! caught;\r\n      }\r\n\r\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\r\n        var entry = this.tryEntries[i];\r\n        var record = entry.completion;\r\n\r\n        if (entry.tryLoc === \"root\") {\r\n          // Exception thrown outside of any try block that could handle\r\n          // it, so set the completion value of the entire function to\r\n          // throw the exception.\r\n          return handle(\"end\");\r\n        }\r\n\r\n        if (entry.tryLoc <= this.prev) {\r\n          var hasCatch = hasOwn.call(entry, \"catchLoc\");\r\n          var hasFinally = hasOwn.call(entry, \"finallyLoc\");\r\n\r\n          if (hasCatch && hasFinally) {\r\n            if (this.prev < entry.catchLoc) {\r\n              return handle(entry.catchLoc, true);\r\n            } else if (this.prev < entry.finallyLoc) {\r\n              return handle(entry.finallyLoc);\r\n            }\r\n\r\n          } else if (hasCatch) {\r\n            if (this.prev < entry.catchLoc) {\r\n              return handle(entry.catchLoc, true);\r\n            }\r\n\r\n          } else if (hasFinally) {\r\n            if (this.prev < entry.finallyLoc) {\r\n              return handle(entry.finallyLoc);\r\n            }\r\n\r\n          } else {\r\n            throw new Error(\"try statement without catch or finally\");\r\n          }\r\n        }\r\n      }\r\n    },\r\n\r\n    abrupt: function(type, arg) {\r\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\r\n        var entry = this.tryEntries[i];\r\n        if (entry.tryLoc <= this.prev &&\r\n            hasOwn.call(entry, \"finallyLoc\") &&\r\n            this.prev < entry.finallyLoc) {\r\n          var finallyEntry = entry;\r\n          break;\r\n        }\r\n      }\r\n\r\n      if (finallyEntry &&\r\n          (type === \"break\" ||\r\n           type === \"continue\") &&\r\n          finallyEntry.tryLoc <= arg &&\r\n          arg <= finallyEntry.finallyLoc) {\r\n        // Ignore the finally entry if control is not jumping to a\r\n        // location outside the try/catch block.\r\n        finallyEntry = null;\r\n      }\r\n\r\n      var record = finallyEntry ? finallyEntry.completion : {};\r\n      record.type = type;\r\n      record.arg = arg;\r\n\r\n      if (finallyEntry) {\r\n        this.method = \"next\";\r\n        this.next = finallyEntry.finallyLoc;\r\n        return ContinueSentinel;\r\n      }\r\n\r\n      return this.complete(record);\r\n    },\r\n\r\n    complete: function(record, afterLoc) {\r\n      if (record.type === \"throw\") {\r\n        throw record.arg;\r\n      }\r\n\r\n      if (record.type === \"break\" ||\r\n          record.type === \"continue\") {\r\n        this.next = record.arg;\r\n      } else if (record.type === \"return\") {\r\n        this.rval = this.arg = record.arg;\r\n        this.method = \"return\";\r\n        this.next = \"end\";\r\n      } else if (record.type === \"normal\" && afterLoc) {\r\n        this.next = afterLoc;\r\n      }\r\n\r\n      return ContinueSentinel;\r\n    },\r\n\r\n    finish: function(finallyLoc) {\r\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\r\n        var entry = this.tryEntries[i];\r\n        if (entry.finallyLoc === finallyLoc) {\r\n          this.complete(entry.completion, entry.afterLoc);\r\n          resetTryEntry(entry);\r\n          return ContinueSentinel;\r\n        }\r\n      }\r\n    },\r\n\r\n    \"catch\": function(tryLoc) {\r\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\r\n        var entry = this.tryEntries[i];\r\n        if (entry.tryLoc === tryLoc) {\r\n          var record = entry.completion;\r\n          if (record.type === \"throw\") {\r\n            var thrown = record.arg;\r\n            resetTryEntry(entry);\r\n          }\r\n          return thrown;\r\n        }\r\n      }\r\n\r\n      // The context.catch method must only be called with a location\r\n      // argument that corresponds to a known catch block.\r\n      throw new Error(\"illegal catch attempt\");\r\n    },\r\n\r\n    delegateYield: function(iterable, resultName, nextLoc) {\r\n      this.delegate = {\r\n        iterator: values(iterable),\r\n        resultName: resultName,\r\n        nextLoc: nextLoc\r\n      };\r\n\r\n      if (this.method === \"next\") {\r\n        // Deliberately forget the last sent value so that we don't\r\n        // accidentally pass it on to the delegate.\r\n        this.arg = undefined;\r\n      }\r\n\r\n      return ContinueSentinel;\r\n    }\r\n  };\r\n})(\r\n  // In sloppy mode, unbound `this` refers to the global object, fallback to\r\n  // Function constructor if we're in global strict mode. That is sadly a form\r\n  // of indirect eval which violates Content Security Policy.\r\n  (function() { return this })() || Function(\"return this\")()\r\n);\r\n","(function (root, factory) {\r\n    if (typeof define === 'function' && define.amd) {\r\n        define(function () {\r\n            return factory(root);\r\n        });\r\n    } else if (typeof exports === \"object\" && typeof module !== \"undefined\") {\r\n        module.exports = factory(root);\r\n    } else {\r\n        factory(root)\r\n    }\r\n})(typeof global !== 'undefined' ? global : typeof window !== 'undefined' ? window : this, function (window) {\r\n\r\n    var isFunction = function (v) {\r\n        return typeof v === 'function'\r\n    }\r\n\r\n    var asyncTask = (function () {\r\n        return typeof process === 'object' &&\r\n            process !== null &&\r\n            typeof process.nextTick === 'function' &&\r\n            process.nextTick ||\r\n            typeof setImmediate === 'function' &&\r\n            setImmediate ||\r\n            setTimeout;\r\n    })()\r\n\r\n    var findIndex = function (arr, key) {\r\n        for (var i = 0; i < arr.length; i++) {\r\n            if (arr[i] == key) return i\r\n        }\r\n        return false\r\n    }\r\n\r\n\r\n    var isInstance = function (obj) {\r\n        return obj && obj instanceof PromisePolyfill\r\n    }\r\n\r\n\r\n    var PromisePolyfill = function (resolver) {\r\n\r\n        var fulfilled = false\r\n        var rejected = false\r\n\r\n        // when resolver trigger reject , isThenAble is false, stop chain calls\r\n        var isThenAble = false\r\n\r\n        // 延迟队列\r\n        var deferreds = []\r\n\r\n        // onfulfilled or onrejected callback push deferreds stack\r\n        this.then = function (onResolve, onReject) {\r\n            if (isFunction(onResolve) || isFunction(onReject)) {\r\n                deferreds.push({\r\n                    onResolve: onResolve || null,\r\n                    onReject: onReject || null\r\n                })\r\n                isThenAble = true\r\n            } else {\r\n                throw new Error('the arguments of \\\"promise.then\\\" can\\'t be empty');\r\n            }\r\n\r\n            // async/await compatibility\r\n            resolver && resolver.call(null, resolve, reject)\r\n\r\n            return this\r\n        }\r\n\r\n\r\n        //create async mutation handler\r\n        var createMutationHandler = function (type, cb) {\r\n            return function (value) {\r\n                if (value instanceof PromisePolyfill) {\r\n                    throw new Error('the value of ' + type + ' should not construtor itself')\r\n                }\r\n\r\n                if (!value) return\r\n\r\n                asyncTask(function () {\r\n                    isThenAble && isFunction(cb) && cb.call(null, value)\r\n                })\r\n            }\r\n        }\r\n\r\n        var popDeferredsStack = function (arr) {\r\n            return arr.length == 0 ? {} : arr.shift()\r\n        }\r\n\r\n        // mark the result of onResolve \r\n        var result\r\n        // deferred object\r\n        var deferred\r\n\r\n        //通过内部promise实例resolve的数据，消费当前实例延时队列\r\n        var onInnerPromiseFulfilled = function (res) {\r\n            resolve(res)\r\n        }\r\n\r\n        var onInnerPromiseRejected = function (err) {\r\n            reject(err)\r\n        }\r\n\r\n        var resolve = createMutationHandler('resolve', function (value) {\r\n            if (!deferreds.length) return\r\n            \r\n            if (rejected) throw Error('can\\'t not call resolve, promise is already rejected')\r\n\r\n            deferred = popDeferredsStack(deferreds)\r\n            result = deferred.onResolve && deferred.onResolve(value)\r\n\r\n            fulfilled = true\r\n            isThenAble = true\r\n\r\n            if (isInstance(result)) {\r\n                result.then(onInnerPromiseFulfilled, onInnerPromiseRejected)\r\n            } else { \r\n                // empty deferreds if result of ins.then not a instance of Promise \r\n                // and continue call then in the chain\r\n                resolve()\r\n            }\r\n\r\n        })\r\n\r\n        var reject = createMutationHandler('reject', function (value) {\r\n            if (fulfilled) throw Error('can\\'t not call reject, promise is already fulfilled')\r\n\r\n            deferred = popDeferredsStack(deferreds)\r\n            deferred.onReject && deferred.onReject(value)\r\n\r\n            rejected = true\r\n            isThenAble = false\r\n        })\r\n    }\r\n\r\n\r\n    PromisePolyfill.all = function (queue) {\r\n        if (!Array.isArray(queue)) return;\r\n\r\n        var results = []\r\n        var i = queue.length\r\n        var consume = i\r\n        var done = false\r\n        var item, _resolve\r\n\r\n        var onResolved = function (res) {\r\n            mutationProxy(res, this)\r\n        }\r\n\r\n        var onRejected = function (err) {\r\n            mutationProxy(err, this, true)\r\n        }\r\n\r\n        var mutationProxy = function (v, ins, isReject) {\r\n            if (done) return\r\n\r\n            var index = findIndex(queue, ins)\r\n            if (index === false) return\r\n            results[index] = v\r\n\r\n            var args = isReject ? [results, true] : [results]\r\n\r\n            untilDone.apply(null, args)\r\n        }\r\n\r\n\r\n        function untilDone(result, ocurrError) {\r\n            consume--\r\n\r\n            if (ocurrError || !consume) {\r\n                _resolve(result)\r\n                done = true\r\n            }\r\n        }\r\n\r\n\r\n        while (i--) {\r\n            item = queue[i]\r\n            if (isInstance(item)) {\r\n                item.then(onResolved.bind(item), onRejected.bind(item))\r\n            } else if (isFunction(item)) {\r\n                //       \r\n                continue;\r\n            } else {\r\n                // ordinary value    \r\n                results[i] = item\r\n                untilDone(results)\r\n            };\r\n        }\r\n\r\n\r\n        return new PromisePolyfill(function (resolve) {\r\n            _resolve = resolve\r\n        })\r\n    }\r\n\r\n\r\n    PromisePolyfill.resolve = function (v) {\r\n        return isInstance(v) ?\r\n            v :\r\n            new PromisePolyfill(function (resovle) {\r\n                resovle(v || 'fulfilled')\r\n            })\r\n    }\r\n\r\n    PromisePolyfill.reject = function (v) {\r\n        return new PromisePolyfill(function (resovle, reject) {\r\n            reject(v || 'rejected')\r\n        })\r\n    }\r\n\r\n\r\n    PromisePolyfill.next = function () {\r\n        var queue = [].slice.call(arguments)\r\n\r\n        function next(err, res) {\r\n            if (err) {\r\n                //console the error from previous loop include (async, sync)\r\n                return console.warn(err)\r\n            }\r\n\r\n            if (!queue.length) {\r\n                //execluted all of queue \r\n                return;\r\n            }\r\n\r\n            var fn = queue.shift()\r\n\r\n            if (isFunction(fn)) {\r\n                try {\r\n                    res !== void 0 ? fn.call(null, next, res) : fn.call(null, next)\r\n                } catch (error) {\r\n                    \r\n                    //catch sync error\r\n                    next(error)\r\n                }\r\n            }\r\n        }\r\n\r\n        next()\r\n    }\r\n\r\n\r\n    PromisePolyfill.race = function (queue) {\r\n        if (!Array.isArray(queue)) return;\r\n        var _resolve\r\n        var i = queue.length\r\n        var item\r\n\r\n        var onMutated = function (data) {\r\n            _resolve(data)\r\n        }\r\n\r\n        while (i--) {\r\n            item = queue[i]\r\n            if (isInstance(item)) {\r\n                item.then(onMutated, onMutated)\r\n            }\r\n        }\r\n\r\n        return new PromisePolyfill(function (resovle) {\r\n            _resolve = resovle\r\n        })\r\n    }\r\n\r\n    return window.Promise || (window.Promise = PromisePolyfill)\r\n})\r\n"]}