{"version":3,"sources":["promise.js"],"names":["root","factory","module","exports","define","amd","global","window","this","isFunction","v","asyncTask","process","nextTick","setImmediate","setTimeout","isInstance","obj","PromisePolyfill","_toString","Object","prototype","toString","createAsyncMutation","type","cb","value","TypeError","ins","isThenable","call","consumeDeferredQueue","arr","length","shift","bind","fn","context","apply","arguments","promiseId","resolver","Error","fulfilled","rejected","deferreds","reject","deferred","onReject","resolve","result","onResolve","then","runResolve","runReject","res","push","all","queue","Array","isArray","item","_resolve","results","i","consume","done","onResolved","mutationProxy","onRejected","err","isReject","index","key","findIndex","untilDone","ocurrError","resovle","race","onMutated","data","fnStr","slice","indexOf","lastIndexOf","isNativeFn","Promise"],"mappings":"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","file":"promise-ployfill.min.js","sourcesContent":["(function (root, factory) {\r\n    if (typeof module === \"object\" && module.exports) {\r\n        // like commonjs\r\n        module.exports = factory(root);\r\n    } else if (typeof define === 'function' && define.amd) {\r\n        // AMD\r\n        define(function () {\r\n            return factory(root);\r\n        });\r\n    } else {\r\n        // Global\r\n        factory(root)\r\n    }\r\n})(typeof global !== 'undefined' ? global : typeof window !== 'undefined' ? window : this, function (window) {\r\n\r\n    var isFunction = function (v) {\r\n        return typeof v === 'function'\r\n    }\r\n\r\n\r\n    var asyncTask = (function () {\r\n        return typeof process === 'object' &&\r\n            typeof process.nextTick === 'function' &&\r\n            process.nextTick ||\r\n            typeof setImmediate === 'function' &&\r\n            setImmediate ||\r\n            setTimeout;\r\n    })()\r\n\r\n\r\n    var findIndex = function (arr, key) {\r\n        for (var i = 0; i < arr.length; i++) {\r\n            if (arr[i] == key) return i\r\n        }\r\n        return false\r\n    }\r\n\r\n\r\n    var isInstance = function (obj) {\r\n        return obj && obj instanceof PromisePolyfill\r\n    }\r\n\r\n\r\n    var _toString = Object.prototype.toString\r\n\r\n    var isPlainObject = function (obj) {\r\n        return _toString.call(obj) === '[object Object]'\r\n    }\r\n\r\n    var isNativeFn = function (fn) {\r\n        if (!isFunction(fn)) return false;\r\n        var fnStr = fn.toString()\r\n        var flag = fnStr.slice(fnStr.indexOf('[') + 1, fnStr.lastIndexOf(']'))\r\n        return flag === 'native code';\r\n    }\r\n\r\n\r\n    //create a async mutation func\r\n    var createAsyncMutation = function (type, cb) {\r\n        return function (value) {\r\n            if (isInstance(value)) {\r\n                throw new TypeError('the value of ' + type + ' should not the promise itself')\r\n            }\r\n\r\n            var ins = this\r\n            asyncTask(function () {\r\n                ins.isThenable && cb.call(ins, value)\r\n            })\r\n        }\r\n    }\r\n\r\n    var consumeDeferredQueue = function (arr) {\r\n        return arr.length == 0 ? {} : arr.shift()\r\n    }\r\n\r\n    // Function.prototype.bind polyfill\r\n    var bind = function (fn, context) {\r\n        return function () {\r\n            fn.apply(context, arguments)\r\n        }\r\n    }\r\n\r\n    var promiseId = 0\r\n\r\n    var PromisePolyfill = function (resolver) {\r\n        if (!isFunction(resolver)) {\r\n            throw new Error('The resolver must be a function');\r\n        }\r\n        this.promiseId = promiseId++\r\n        this.resolver = resolver\r\n        this.fulfilled = false\r\n        this.rejected = false\r\n        this.isThenable = false //赋予能力可以使 promise 从 pending 状态 突变到 fulfilled or rejected\r\n        this.deferreds = []\r\n    }\r\n\r\n    PromisePolyfill.prototype.reject = createAsyncMutation('reject', function (value) {\r\n        if (this.fulfilled) throw Error('can\\'t not call reject, promise is already fulfilled')\r\n\r\n        this.rejected = true\r\n        this.isThenable = false\r\n\r\n        var deferred = consumeDeferredQueue(this.deferreds)\r\n        if (!deferred.onReject) {\r\n            throw new Error('Uncaught (in promise)' + ' ' + value)\r\n        }\r\n        deferred.onReject(value)\r\n    })\r\n\r\n\r\n    PromisePolyfill.prototype.resolve = createAsyncMutation('resolve', function (value) {\r\n        if (!this.deferreds.length) return\r\n\r\n        if (this.rejected) throw Error('can\\'t not call resolve, promise is already rejected')\r\n\r\n        this.fulfilled = true\r\n        this.isThenable = true\r\n\r\n        var deferred = consumeDeferredQueue(this.deferreds)\r\n        var result = deferred.onResolve && deferred.onResolve(value)\r\n\r\n        if (isInstance(result)) {\r\n            //构造魔法回调，利用内部的promise实例，消化本实例自身的延时队列，实现链式效果\r\n            result.then(bind(this.runResolve, this), bind(this.runReject, this))\r\n        } else {\r\n            //回调的结果不是promise的实例，但延时队列又没消费完的时候，会继续递归地执行resolve进行消费\r\n            this.resolve()\r\n        }\r\n\r\n    })\r\n\r\n    PromisePolyfill.prototype.runResolve = function (res) {\r\n        this.resolve(res)\r\n    }\r\n\r\n    PromisePolyfill.prototype.runReject = function (res) {\r\n        this.reject(res)\r\n    }\r\n\r\n\r\n    PromisePolyfill.prototype.then = function (onResolve, onReject) {\r\n        if (isFunction(onResolve) || isFunction(onReject)) {\r\n            this.deferreds.push({\r\n                onResolve: onResolve || null,\r\n                onReject: onReject || null\r\n            })\r\n            this.isThenable = true\r\n        } else {\r\n            throw new Error('the arguments of \\\"promise.then\\\" can\\'t be empty');\r\n        }\r\n\r\n        // async/await compatibility\r\n        this.resolver && this.resolver(bind(this.resolve, this), bind(this.reject, this))\r\n        this.resolver = null\r\n\r\n        return this\r\n    }\r\n\r\n\r\n    //Under the IE9 Version, the 'catch' is the keyword to browser;\r\n    PromisePolyfill.prototype['catch'] = function (rejected) {\r\n        this.then(null, rejected);\r\n    }\r\n\r\n\r\n    PromisePolyfill.all = function (queue) {\r\n        if (!Array.isArray(queue)) return;\r\n\r\n        var results = []\r\n        var i = queue.length\r\n        var consume = i\r\n        var done = false\r\n        var item, _resolve\r\n\r\n        var onResolved = function (res) {\r\n            mutationProxy(res, this)\r\n        }\r\n\r\n        var onRejected = function (err) {\r\n            mutationProxy(err, this, true)\r\n        }\r\n\r\n        var mutationProxy = function (v, ins, isReject) {\r\n            if (done) return\r\n\r\n            var index = findIndex(queue, ins)\r\n            if (index === false) return\r\n\r\n            results[index] = v\r\n            var args = isReject ? [results, true] : [results]\r\n\r\n            untilDone.apply(null, args)\r\n        }\r\n\r\n\r\n        function untilDone(result, ocurrError) {\r\n            consume--\r\n\r\n            if (ocurrError || !consume) {\r\n                _resolve(result)\r\n                done = true\r\n            }\r\n        }\r\n\r\n\r\n        while (i--) {\r\n            item = queue[i]\r\n            if (isInstance(item)) {\r\n                item.then(bind(onResolved, item), bind(onRejected, item))\r\n            } else {\r\n                // ordinary value    \r\n                results[i] = item\r\n                untilDone(results)\r\n            };\r\n        }\r\n\r\n\r\n        return new PromisePolyfill(function (resolve) {\r\n            _resolve = resolve\r\n        })\r\n    }\r\n\r\n\r\n    PromisePolyfill.resolve = function (v) {\r\n        if (isPlainObject(v) && !isInstance(v) && typeof v.then === 'function') {\r\n            return new PromisePolyfill(v.then)\r\n        }\r\n\r\n        if (isInstance(v)) {\r\n            return v\r\n        }\r\n\r\n        return new PromisePolyfill(function (resovle) {\r\n            resovle(v)\r\n        })\r\n    }\r\n\r\n\r\n    PromisePolyfill.reject = function (v) {\r\n        return new PromisePolyfill(function (resovle, reject) {\r\n            reject(v)\r\n        })\r\n    }\r\n\r\n    PromisePolyfill.race = function (queue) {\r\n        if (!Array.isArray(queue)) return;\r\n        var _resolve\r\n        var onMutated = function (data) {\r\n            _resolve(data)\r\n        }\r\n\r\n        var i = queue.length\r\n        var item\r\n        while (i--) {\r\n            item = queue[i]\r\n            if (isInstance(item)) {\r\n                item.then(onMutated, onMutated)\r\n            }\r\n        }\r\n\r\n        return new PromisePolyfill(function (resovle) {\r\n            _resolve = resovle\r\n        })\r\n    }\r\n\r\n    //return window.Promise = PromisePolyfill\r\n    return isNativeFn(window.Promise) && window.Promise || (window.Promise = PromisePolyfill)\r\n})"]}